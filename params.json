{"name":"pgPointcloud","tagline":"A PostgreSQL extension for storing point cloud (LIDAR) data.","body":"### Welcome to pgPointCloud simple home site\r\n\r\n#### Introduction ####\r\n `@TODO : put a nice image in background`\r\n\r\n* Lidar point cloud are becoming more and more available. Devices are easy to get, not too expensive, and provide very accurate 3D points.\r\n* Yet storing and using those Billions of points is a challenge.\r\n*  **pgPointCLoud** is an open source PostgreSQL extension for storing point cloud (LIDAR) data and use it with PostGIS.\r\n* It is very easy to use, robust and efficient.\r\n* By storing Lidar point in a PostgreSQL database, pgPointCloud eases many problems and allows a good integration with other geo-spatial data (vector,raster) into one common framework : PostGIS.\r\n\r\n#### What can be done with pgPointCloud? ####\r\n\r\n * pgPointCloud offers a way to efficiently store points in a postgres database.\r\n * In fact, pgpPointCloud stores _groups_ of points (pcPoints) called pcPatch\r\n * storing groups of point allows efficient compression of data.\r\n * This patch have a bounding box which can be used by PostGIS spatial features to greatly accelerate queries.\r\n * pgPointCloud allow then to efficiently _query_ very big point cloud.\r\n * Querying can be done using spatial criteria (which points are in this area), as well as point attributes criteria (which points have a value of this attribute between .. and ... ?)\r\n\r\n * The point cloud being in a server, they can be used for processing or visualization, or streamed.\r\n\r\n#### Why use pgPointCloud to store Lidar points into postgreSQL and not in point cloud files?####\r\n\r\n * The traditional way of storing point cloud is using several files containing each a part of the point cloud\r\n * This as some severe limitations (that could be solved, that would amount to recreate a small postgres/postGis)\r\n  * Not efficient data query (to get a few points, you need to read the whole file)\r\n  * no concurrency (only one user can modify points at a time/read points at a time)\r\n  * files tends to get duplicated a lot (each worker has it's own private version)\r\n  * no security of data ( file could be corrupted by a processing, hard to manage who access what)\r\n  * Hard to use several different point cloud at the same time\r\n  * Hard to use point cloud with other spatial data (vector, raster, images)\r\n * pgPointCloud solves all of this problem, at a very low cost: you have to use a DBMS.\r\n\r\n#### Does pgPointCloud scale? ####\r\n * pgPointCloud is a young project, yet it has been proven to work fast (1ms query time) with a 5 billions points cloud.\r\n * Currently pgPointCloud is fast for\r\n  - [x] Load data into DB\r\n  - [x] automatically compress data\r\n  - [x] Query patches based on spatial or other attributes\r\n * It is slow for\r\n  - [ ] Data output (100k pts/sec)\r\n  - [ ] In base conversion (no functions)\r\n\r\n#### Resources ####\r\n * [pgPointCloud repository](https://github.com/pramsey/pointcloud#pointcloud) with very thorough step by step demo\r\n * [pgPointCloud mailing list](http://lists.osgeo.org/cgi-bin/mailman/listinfo/pgpointcloud)\r\n * pgPointCloud documentation\r\n  * [General presentationof pgPointCloud by its creator @pramsey](http://boundlessgeo.com/wp-content/uploads/2013/10/pgpointcloud-foss4-2013.pdf) \r\n  * [A testimony of successful uses of pgPointCloud in a vector/raster/Lidar framework ](http://www.coordinatesolutions.com/download/Jan2013OGI%20Presentation.pdf)\r\n  * [An Advanced presentation of various usages of a Point Cloud server, starting from basic to very complex examples](https://github.com/Remi-C/Postgres_Day_2014_10_RemiC/raw/master/presentation/A%20PostgreSQL%20Server%20for%20Point%20Cloud%20Storage%20and%20Processing.pdf)\r\n  * [A scientific paper comparing a pgPointCloud solution and a MonetDB solution](http://foss4g-e.org/sites/default/files/11-Martinez-Rubi_0.pdf)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}